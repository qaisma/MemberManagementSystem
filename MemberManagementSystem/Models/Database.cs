// Licence file C:\Users\Qais\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace MemberManagementSystem.Models
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMMSDbContext : IDisposable
    {
        DbSet<Account> Accounts { get; set; } // Accounts
        DbSet<Comapny> Comapnies { get; set; } // Comapnies
        DbSet<Member> Members { get; set; } // Members
        DbSet<User> Users { get; set; } // Users

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MMSDbContext : DbContext, IMMSDbContext
    {
        public MMSDbContext()
        {
        }

        public MMSDbContext(DbContextOptions<MMSDbContext> options)
            : base(options)
        {
        }

        public DbSet<Account> Accounts { get; set; } // Accounts
        public DbSet<Comapny> Comapnies { get; set; } // Comapnies
        public DbSet<Member> Members { get; set; } // Members
        public DbSet<User> Users { get; set; } // Users

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=(local);Initial Catalog=MemberManagementSystem;User ID=sa; Password=1;");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new AccountConfiguration());
            modelBuilder.ApplyConfiguration(new ComapnyConfiguration());
            modelBuilder.ApplyConfiguration(new MemberConfiguration());
            modelBuilder.ApplyConfiguration(new UserConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class MMSDbContextFactory : IDesignTimeDbContextFactory<MMSDbContext>
    {
        public MMSDbContext CreateDbContext(string[] args)
        {
            return new MMSDbContext();
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Accounts
    public class Account
    {
        [JsonIgnore]
        public int MemberId { get; set; } // MemberId (Primary key)
        [JsonIgnore]
        public int CompanyId { get; set; } // CompanyId (Primary key)
        public int Balance { get; set; } // Balance

        [JsonProperty(PropertyName = "Name")]
        [System.ComponentModel.DataAnnotations.Schema.NotMapped]
        public string CompanyName { get; set; }


        [JsonConverter(typeof(StringEnumConverter))]
        public Enums.Statuses Status { get; set; } // Status

        // Foreign keys

        /// <summary>
        /// Parent Comapny pointed by [Accounts].([CompanyId]) (FK_Accounts_Comapnies)
        /// </summary>
        [System.Xml.Serialization.XmlIgnore]
        [JsonIgnore]
        public virtual Comapny Comapny { get; set; } // FK_Accounts_Comapnies

        /// <summary>
        /// Parent Member pointed by [Accounts].([MemberId]) (FK_Accounts_Members)
        /// </summary>
        [System.Xml.Serialization.XmlIgnore]
        [JsonIgnore]
        public virtual Member Member { get; set; } // FK_Accounts_Members

        public Account()
        {
            Balance = 0;
        }
    }

    // Comapnies
    public class Comapny
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child Accounts where [Accounts].[CompanyId] point to this entity (FK_Accounts_Comapnies)
        /// </summary>
        public virtual ICollection<Account> Accounts { get; set; } // Accounts.FK_Accounts_Comapnies

        public Comapny()
        {
            Accounts = new List<Account>();
        }
    }

    // Members
    public class Member
    {
        [JsonIgnore]
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 150)
        public string Address { get; set; } // Address (length: 500)

        [System.Xml.Serialization.XmlIgnore]
        [JsonIgnore]
        public int UserId { get; set; } // UserId

        // Reverse navigation

        /// <summary>
        /// Child Accounts where [Accounts].[MemberId] point to this entity (FK_Accounts_Members)
        /// </summary>
        public virtual ICollection<Account> Accounts { get; set; } // Accounts.FK_Accounts_Members

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [Members].([UserId]) (FK_Members_Users)
        /// </summary>
        [System.Xml.Serialization.XmlIgnore]
        [JsonIgnore]
        public virtual User User { get; set; } // FK_Members_Users

        public Member()
        {
            Accounts = new List<Account>();
        }
    }

    // Users
    public class User
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 200)
        public string Email { get; set; } // Email (length: 200)
        public string LoginName { get; set; } // LoginName (length: 200)
        public string LoginPassword { get; set; } // LoginPassword (length: 200)

        // Reverse navigation

        /// <summary>
        /// Child Members where [Members].[UserId] point to this entity (FK_Members_Users)
        /// </summary>
        public virtual ICollection<Member> Members { get; set; } // Members.FK_Members_Users

        public User()
        {
            Members = new List<Member>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Accounts
    public class AccountConfiguration : IEntityTypeConfiguration<Account>
    {
        public void Configure(EntityTypeBuilder<Account> builder)
        {
            builder.ToTable("Accounts", "dbo");
            builder.HasKey(x => new { x.MemberId, x.CompanyId }).HasName("PK_CompaniesAccounts").IsClustered();

            builder.Property(x => x.MemberId).HasColumnName(@"MemberId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Balance).HasColumnName(@"Balance").HasColumnType("int").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Comapny).WithMany(b => b.Accounts).HasForeignKey(c => c.CompanyId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Accounts_Comapnies");
            builder.HasOne(a => a.Member).WithMany(b => b.Accounts).HasForeignKey(c => c.MemberId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Accounts_Members");
        }
    }

    // Comapnies
    public class ComapnyConfiguration : IEntityTypeConfiguration<Comapny>
    {
        public void Configure(EntityTypeBuilder<Comapny> builder)
        {
            builder.ToTable("Comapnies", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Comapnies").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
        }
    }

    // Members
    public class MemberConfiguration : IEntityTypeConfiguration<Member>
    {
        public void Configure(EntityTypeBuilder<Member> builder)
        {
            builder.ToTable("Members", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Members").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.User).WithMany(b => b.Members).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Members_Users");
        }
    }

    // Users
    public class UserConfiguration : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.ToTable("Users", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Users").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.LoginName).HasColumnName(@"LoginName").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.LoginPassword).HasColumnName(@"LoginPassword").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
        }
    }


    #endregion

}
// </auto-generated>
